Tikslas - įsisavinti: 
  (a) elgsena paremto programavimo principus
  (b) modulinį (angl. "unit") testavimą 
  (c) RSpec testavimo karkasą
  (d) Ruby progravimo kalbą

Užduotis:
  1) Užduoties tema:
    a) Sugalvoti užduoties temą (negali kartotis su jau užregistruotomis temomis http://github.com/sauliusgrigaitis/bank/blob/master/uzregistruotos_temos )
    b) Sugalvoti bent 30 sistemos sąvybių iš sistemos naudotojų pusės ( pavyzdys http://github.com/sauliusgrigaitis/bank/blob/master/savybes ). Kuo daugiau sugalvosite, tuo geriau, nes nebūtina visų įgyvendinti, svarbu įgyvendinti svarbiausias.
    c) Išskirti ~ 5 penkias svarbiausias sąvybes kurios ir bus įgyvendinamos pirmiausiai. Sąvybės svarbą lemia sistemos paskirtis, jei tai yra komercinė sistema, tai svarbiausios sąvybės tikriausia bus tos, kurios būtinos pradėti gauti pajamas.
    d) Užduoties tema turi būti pakankamos apimties, minimalus reikalavimas yra 5 esminės esybės. Pvz. jei kuriama bankinė sistema, tai esminės esybės būtų: Sąskaita, Vartotojas, Tranzakcija, Valiuta, PalūkanųNorma.
    e) Bankinės sistemos kurti negalima (ji bus kuriama paskaitų metu kaip mokomoji priemonė) 
    f) Pačios kuriamos sistemos taip pat turi būti unikalios, t.y. pakeitus vienos sistemos esybių pavadinimus gauta sistema nebus skaitoma kaip unikali
    g) a), b) ir c) užregistruoti el. paštu saulius taškas grigaitis at mif taškas vu taškas lt iki 2009-10-18
  2) Reikalavimai:
    a) Kodas turi būti rašomas panaudojant OOP principus, Ruby idiomas (pvz. iteratoriai su blokais vietoj ciklų), Ruby vardų taisykles, dviejų tarpų (angl. "space") symbolių indentaciją ir pan.
    b) Testų rinkinį turi sudaryti bent 50 testų
    c) Turi būti tikslingai (t.y. ten kur jų tikrai reikia) panaudoti bent 5 palygintojai (angl. "matcher"). Sąrašas http://github.com/dchelimsky/rspec/tree/master/lib/spec/matchers/ , daugiau apie kiekvieną yra dokumentacijoje pačiuose juos aprašančiuose failuose.
    d) Turi būti sukurti ir tikslingai panaudoti bent du savi palygintojai ( http://wiki.github.com/dchelimsky/rspec/custom-matchers )
    e) Esybės aprašomos klasėmis, kiekviena klasė atskirame faile.
    f) Esybes aprašančios klasės ir testai turi būti parašyti taikant elgsena paremtą programavimą.
    g) Esybes aprašančios klasės turi būti 100% padengtos testais (jei padengimas yra mažesnis - jis turi būti motyvuotas) 
    h) Vartotojo sąsaja turi būti aiškiai izoliuota nuo esybes aprašančių klasių. Vartotojo sąsasaja gali būti tiek komandinės eilutės, tiek ir grafinė. Vartotojo sąsaja nebūtinai turi būti programuojama taikant elgsena paremtą programavimą.
    i) Negalima naudoti Rails ar kokio nors kito karkaso atliekant šią užduotį. T.y. užduotis turi daugiau demonstruoti gebėjimą programuoti Ruby, o ne naudojimąsi kokiu nors karkasu.
    j) Programa turi išsaugoti būseną ir ją atstatyti (pvz panaudojant YAML failus)
    k) Pasirinktu būdų turi būti parodoma, kad programa ir testai buvo rašomi žingsnis po žingsnio ( rekomenduoju Git versijų kontrolės sistemą)

  3) Papildomi balai: 
    Skiriama po 0.2 balo už 2) skiltyje nurodytų aiškiai pamatuojamų reikalavimų dvigubą įvykdymą, pvz. tikslinis 10 palygintojų panaudojimas
    Papildomi balai skiriami ir už įpatingai gerai atliktas užduotis.
   
!!! Užduoties reikalavimai negalutiniai !!!    
